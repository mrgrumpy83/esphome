esphome:
  name: gate-control
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: !secret wifi_ssid_24
  password: !secret wifi_password
  
# Enable fallback hotspot (captive portal) in case wifi connection fails
#ap:
#  ssid: "Gate Control Fallback Hotspot"
#  password: !secret gate_fallback_hotspot_password

#captive_portal:


# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret gate_api_password
  encryption: 
    key: !secret gate_api_key

ota:
  password: !secret gate_ota_password

web_server:
  port: 80

text_sensor:
  - platform: template
    name: "Gate Controller Uptime"
    id: uptime_human
    icon: mdi:clock-start
  
sensor:
- platform: wifi_signal
  name: "Gate Controller Wifi"
  update_interval: 60s
  icon: mdi:wifi
- platform: uptime
  name: "Gate Controller Uptime Seconds"
  id: uptime_sensor
  on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

switch:
#Set to open relay output
- platform: gpio
  id: gate_open
  #internal: true
  pin:
    number: D1
    inverted: True
  restore_mode: ALWAYS_OFF
  
#Set to stop relay output
- platform: gpio
  id: gate_stop
  pin:
    number: D2
    inverted: True
  restore_mode: ALWAYS_OFF

#Set to close relay output
- platform: gpio
  id: gate_close
  #internal: true
  pin:
    number: D3
    inverted: True
  restore_mode: ALWAYS_OFF
  
#Set to pedestrian relay output
- platform: gpio
  id: gate_ped
  #internal: true
  pin:
    number: D4
    inverted: True
  restore_mode: ALWAYS_OFF
  

 
#Switch to toggle reboot 
- platform: restart
  name: "Gate Controller REBOOT"

cover:
# Set up cover - vehicle
  - platform: template
    device_class: gate
    name: Vehicle Gate
    id: vechicle_gate
    open_action:
      # Cancel any previous action
      - switch.turn_off: gate_close
      # Turn the OPEN switch on briefly
      - switch.turn_on: gate_open
      - delay: 0.1s
      - switch.turn_off: gate_open
    close_action:
      - switch.turn_off: gate_open
      - switch.turn_on: gate_close
      - delay: 0.1s
      - switch.turn_off: gate_close
    stop_action:
      - switch.turn_off: gate_close
      - switch.turn_off: gate_open
      - switch.turn_on: gate_stop
      - delay: 0.1s
      - switch.turn_off: gate_stop
    optimistic: true
    assumed_state: true

  # Set up cover - pedestrian
  - platform: template
    device_class: gate
    name: Pedestrian Gate
    id: pedestrian_gate
    open_action:
      # Cancel any previous action
      - switch.turn_off: gate_close
      # Turn the OPEN switch on briefly
      - switch.turn_on: gate_ped
      - delay: 0.1s
      - switch.turn_off: gate_ped
    close_action:
      - switch.turn_off: gate_ped
      - switch.turn_on: gate_close
      - delay: 0.1s
      - switch.turn_off: gate_close
    stop_action:
      - switch.turn_off: gate_close
      - switch.turn_off: gate_ped
      - switch.turn_on: gate_stop
      - delay: 0.1s
      - switch.turn_off: gate_stop
    optimistic: true
    assumed_state: true
  
  
#- platform: template
#  id: garage_door_lock
#  name: "Garage Door Lock"
#  icon: "mdi:lock"
#  #optimistic: true
#  turn_on_action:
#    then: 
#      - if:
#          condition:
#            binary_sensor.is_off: doorsensor
#          then:
#            - switch.template.publish:
#                id: garage_door_lock
#                state: ON
#            - logger.log: "Door is closed. Door is now locked!"
#      - if:
#          condition: 
#            binary_sensor.is_on: doorsensor
#          then:
#            - logger.log: "Door is open - closing it before locking!"
#            - cover.close: garage_door_cover
#            - wait_until:
#                binary_sensor.is_off: doorsensor
#            - logger.log: "Door is now closed."
#            - switch.template.publish:
#                id: garage_door_lock
#                state: ON
#            - logger.log: "Door is now locked!"
#  turn_off_action:
#    - switch.template.publish:
#        id: garage_door_lock
#        state: OFF
#    - logger.log: "Door Unlocked!"

#cover:
#  - platform: template
#    device_class: garage
#    assumed_state: true
#    name: "Car Door"
#    id: car_door_cover
#    open_action:
#      switch.turn_on: garage_door_car
#    close_action:
#       switch.turn_on: garage_door_car
       
#  - platform: template
#    device_class: garage
#    assumed_state: true
#    name: "Bike Door"
#    id: bike_door_cover
#    open_action:
#      switch.turn_on: garage_door_bike
#    close_action: 
#      switch.turn_on: garage_door_bike
