esphome:
  name: garage-door
  platform: ESP8266
  board: d1_mini
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #ap:
    #ssid: "fallback"
    #password: "wyBRxKBVmpfe"

#captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "88L*CjHS@f2m"
  encryption: 
    key: "bwOlz9/K6wFhhq9D9t/JHtZ+CERh7fqA509K44wlhAI="

ota:
  password: "88L*CjHS@f2m"

web_server:
  port: 80

text_sensor:
  - platform: template
    name: "Garage Door Opener Uptime"
    id: uptime_human
    icon: mdi:clock-start
  
sensor:
- platform: wifi_signal
  name: "Garage Door Opener Wifi"
  update_interval: 60s
  icon: mdi:wifi
- platform: uptime
  name: "Garage Door Opener Uptime Seconds"
  id: uptime_sensor
  on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

# Door open/close sensors
binary_sensor:
# Car Door Sensor
- platform: gpio
  id: cardoorsensor
  pin:
    number: D7
    mode: INPUT_PULLUP
    inverted: False
  name: "Car Door State"
  device_class: garage_door
  on_state:
    - switch.turn_off: car_door_lock
  filters:
    - delayed_on: 500ms
    - delayed_off: 500ms

# Bike Door Sensor
- platform: gpio
  id: bikedoorsensor
  pin:
    number: D8
    mode: INPUT_PULLUP
    inverted: False
  name: "Bike Door State"
  device_class: garage_door
  on_state:
    - switch.turn_off: bike_door_lock
  filters:
    - delayed_on: 500ms
    - delayed_off: 500ms

switch:
#Car Door relay output
- platform: gpio
  id: car_door_switch
  #internal: true
  pin:
    number: D1
    inverted: True
  restore_mode: ALWAYS_OFF

#Bike Door relay output
- platform: gpio
  id: bike_door_switch
  #internal: true
  pin:
    number: D2
    inverted: True
  restore_mode: ALWAYS_OFF
 
#Switch to toggle reboot 
- platform: restart
  name: "Garage Door REBOOT"
  
- platform: template
# Add in logic here to first wait for door to close and then lock it
  id: car_door_lock
  name: "Car Door Lock"
  icon: "mdi:lock"
  #optimistic: true
  turn_on_action:
    # Just call cover close here. It takes care of any pre-conditions and closes door if it's open
    - cover.close: car_door_cover
    - wait_until: 
        binary_sensor.is_off: cardoorsensor
    - logger.log: "Car door is closed. Locking now."
    - switch.template.publish:
        id: car_door_lock
        state: ON
    - logger.log: "Car Door is now locked!"
  turn_off_action:
    - switch.template.publish:
        id: car_door_lock
        state: OFF
    - logger.log: "Car Door Unlocked!"
    
- platform: template
  id: bike_door_lock
  name: "Bike Door Lock"
  icon: "mdi:lock"
  #optimistic: true
  turn_on_action:
    # Just call cover close here. It takes care of any pre-conditions and closes door if it's open
    - cover.close: bike_door_cover
    - wait_until: 
        binary_sensor.is_off: bikedoorsensor
    - logger.log: "Bike door is closed. Locking now."
    - switch.template.publish:
        id: bike_door_lock
        state: ON
    - logger.log: "Bike Door is now locked!"
  turn_off_action:
    - switch.template.publish:
        id: bike_door_lock
        state: OFF
    - logger.log: "Bike Door Unlocked!"

cover:
  - platform: template
    device_class: garage
    assumed_state: true
    name: "Car Door"
    id: car_door_cover
    lambda: |-
      if (id(cardoorsensor).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
    open_action:
    # Only open if the door is closed AND the lock is disengaged.
    # Only close if the door is open (toggling the output will simply change the door state if we're not conditional on current state)
      - if:
          condition:
            and: 
              - switch.is_off: car_door_lock
              - binary_sensor.is_off: cardoorsensor
          then: 
            - switch.turn_on: car_door_switch
            - delay: 0.1s
            - switch.turn_off: car_door_switch
            - logger.log: "Car Door is opening..."
          else:
            - logger.log: "Car Door is locked and/or already open. Doing nothing."
    close_action:
      - if:
          condition:
            binary_sensor.is_on: cardoorsensor
          then:
            - switch.turn_on: car_door_switch
            - delay: 0.1s
            - switch.turn_off: car_door_switch
            - logger.log: "Car Door is closing..."
          else:
            - logger.log: "Car Door already closed. Doing nothing."
            
# Bike Door            
  - platform: template
    device_class: garage
    assumed_state: true
    name: "Bike Door"
    id: bike_door_cover
    lambda: |-
      if (id(bikedoorsensor).state) {
        return COVER_OPEN;
      } else {
        return COVER_CLOSED;
      }
    open_action:
    # Only open if the door is closed AND the lock is disengaged.
    # Only close if the door is open (toggling the output will simply change the door state if we're not conditional on current state)
      - if:
          condition:
            and: 
              - switch.is_off: bike_door_lock
              - binary_sensor.is_off: bikedoorsensor
          then: 
            - switch.turn_on: bike_door_switch
            - delay: 0.1s
            - switch.turn_off: bike_door_switch
            - logger.log: "Bike Door is opening..."
          else:
            - logger.log: "Bike Door is locked and/or already open. Doing nothing."
    close_action:
      - if:
          condition:
            binary_sensor.is_on: bikedoorsensor
          then:
            - switch.turn_on: bike_door_switch
            - delay: 0.1s
            - switch.turn_off: bike_door_switch
            - logger.log: "Bike Door is closing..."
          else:
            - logger.log: "bike Door already closed. Doing nothing."
